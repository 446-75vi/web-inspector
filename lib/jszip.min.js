/*!

JSZip v3.10.1 - A JavaScript class for generating and reading zip files
<http://stuartk.com/jszip>

(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>
Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/main/LICENSE.markdown.

JSZip uses the library pako released under the MIT license :
https://github.com/nodeca/pako/blob/main/LICENSE
*/

// Note: This is just a placeholder for the JSZip library.
// In a real implementation, you would download the full minified library from:
// https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js

(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.JSZip = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
    // Simplified JSZip implementation for demonstration
    class JSZip {
      constructor() {
        this.files = {};
      }
    
      file(path, content) {
        this.files[path] = {
          name: path,
          data: content,
          options: {}
        };
        return this;
      }
    
      folder(name) {
        const folderInstance = new JSZip();
        folderInstance._parentFolder = this;
        folderInstance._parentPath = name;
        return folderInstance;
      }
    
      generateAsync(options) {
        return new Promise((resolve) => {
          // In a real implementation, this would create a zip file
          // Here we're just creating a dummy blob
          const blob = new Blob(['Dummy zip content'], { type: 'application/zip' });
          resolve(blob);
        });
      }
    }
    
    // Export
    if (typeof window !== "undefined") {
      window.JSZip = JSZip;
    }
    
    module.exports = JSZip;
    
    },{}]},{},[1])(1)
    });